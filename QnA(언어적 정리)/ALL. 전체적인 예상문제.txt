- Class Object의 차이
 Class 설계도 혹은 틀
 Object 구현할 대상 생성된 실체  new 전
 Instance 구현된 구체적 실체 메모리에 할당된 Object new 후

- Tree, Heap

- 인터페이스와 추상클래스 차이

	추상 클래스(미완성 설계도)
	- 추상 클래스는 추상 메서드가 하나 이상 포함 되거나 abstract로 정의된 경우
 	동일 부모를 가지는 클래스를 묶는 개념으로 상속을 받아 기능을 확장시키는 것이 목적
	인터페이스(기본 설계도)
	- 인터페이스는 모든 메서드가 추상 메서드인 경우를 말한다. 추상클래스보다 한단계 더 추상화 된 클래스라고 볼 수 있다.
	구현 객체가 같은 동작을 한다는 것을 보장하는 것이 목적이다.
	다중 상속이 가능하다.
 공통점
	<- 선언만 있고 구현은 없는 클래스이다.
	<- 인스턴스화를 할 수 없다.
	<- 추상 클래스를 extends로 상속받은 자식들과 인터페이스를 implements하고 구현한 자식들만 객체를 생성할 수 있다.
차이점	 추상클래스 VS 인터페이스
	<- 단일상속 VS 다중상속
	<- 관련성 높은 코드끼리의 공유  VS 관련성 없는 코드들끼리의 공유
	<- 상속을 받아 기능을 확장시키려는 목적 VS 구현체(클래스)에 특정 메서드가 반드시 존재하도록 강제

- OOP 특징 설명
	현실세계의 대상을 모델링 하여 객체로 추상화 하고 유기적인 상호작용을 통해 문제를 해결하는 프로그래밍 기법입니다.

- 프로세스, 쓰레드(멀티)

- 블로킹, 논블로킹
	블로킹은 자신이 작업을 모두 끝낼때까지 제어권을 가지고 있어 호출한 함수가 대기하게 하는 것
	넌 블로킹은 자신이 호출되자마자 Return해서 호출한 함수에게 제어권을 준다.
- 동기, 비동기
	동기는 함수를 호출하고 호출된 함수의 작업이 끝날 때까지 기다리거나 작업완료에 대해 신경씀
	비동기는 함수를 호출하고 신경을 쓰지않고 callback이 신경씀

- 이뮤터블
	변경 가능한 객체로 리스트, 딕셔너리, 집합 등  CALL BY REF속성
	값을 변경하면 객체 자체를 업데이트
- 뮤터블
	변경 불가능한 객체
	수, 문자열, 튜플 등
	CALL BY VALUE
	값을 변경하면 기존의 객체는 변하지 않는다.(새로 생성되어 참조로 업데이트 됨)

- 해쉬테이블
	 각 키에대해 해시함수를 적용해 인덱스를 생성하고 저장하거나 검색한다. O(1) 
	만약 충돌하는 경우가 있다면 분리하여 리스트로 관리하거나 빈공간에 저장하는 방법 1칸, 2^n칸, 해싱한값 해싱
	해시맵 -> 비동기, 해시테이블-> 동기화 지원
- C++ 버추얼
- 인덱스의 장단점
	장점
 	데이터 속도와 성능 향상시킬 수 있습니다.
	이로인해 시스템의 성능을 향상시킬 수 있습니다.
	단점
	데이터베이스 용량의 10%를 차지합니다.
	잘못 사용하면 오히려 성능 저하가 있을 수 있습니다.
	인덱스를 관리하기 위한 오버헤드가 있습니다.

- 소팅 -> 손코딩
- 손코딩(알고리즘)
- 프로젝트 관련 기술
- 스트레스 관리, 갈등관리