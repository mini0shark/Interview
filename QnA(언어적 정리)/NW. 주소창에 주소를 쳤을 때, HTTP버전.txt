Q. 소켓통신이 무엇인가요?
 HTTP 통신은 비연결, 무상태성 통신으로 클라이언트가 요청하고 서버가 응답하는 형식으로 작동된다고 한다면, 소켓 통신은 서버와 클라이언트가 서로 연결 하여 양방향 통신하는 방식으로 서버와 클라이언트가 먼저 요청을 보낼 수 있습니다. 연결지향형 통신이기 때문에 실시간 통신이 필요한 곳에 사용됩니다.

Q. HTTP에대해서 설명해 보세요
	-> 서로 다른 체계의 시스템 사이에서 통신을 주고 받는 가장 기초적인 프로토콜
	-> HTTP는 TCP/IP 통신을 이용하고 URI를 통해 요청하고 서버가 응답해 주는 형식입니다.
	-> HTTP의 특징은 상태를 유지하지 않고 세션, 쿠키를 이용하여 이런 문제를 보안합니다.


Q. 세션과 쿠키의 차이점
Q.  HTTPSession.getAttribute("user") 쓸때
 사용자 A가 접속해도 "user"를 key로 가져오고
 사용자 B가 접속을 해도 "user"를 key로 가져올텐데
 어떻게 A와 B를 구분해서 가져오나요
쿠키가 Requset와 Response에서는 어느 부분으로 전달되는가?



HTTP 1.1 ~ 3
1.1
Persistent Connection, Piplining 도입
HeadOf Line Blocking, Header 중복
2.0
B HTTP 메시지 전송방식 변화(바이너리)
M 요청과 응답 다중화(멀티플렉싱)
S Server Push
H Header 압축
TCP Head of Line Blocking
리소스간 우선순위 설정

QUIC
TCP한계 극복하려는 전송 프로토콜(UDP 변형)
독립 스트립 사용
전송속도 향상
Connection UUID로 서버와 연결
TLS 기본 적용



Q. GET, POST 방식의 차이점
Q. RestFul하다의 의미는?
 - REST란 자원을 이름으로 구분하여 자원의 정보를 주고받는 것을 의미하는데 이렇게 REST한 API를 제공하는 것이 RESTful하다고 할 수 있습니다.

url과 uri의 차이점



Q. 브라우저에 Naver.com을 치면 어떤 일이 일어나나요?
Q. "네이버에 사용자가 아이디와 패스워드를 입력하고 로그인을 했다." 이 과정에서 발생한 모든 일을 될 수 있는대로 이야기해봐라.
Q. DNS서버에 요청하면 모든 정보가 DNS에 저장되어 있어요?

Q. 네이버는 수많은 사람들이 서비스 요청을 하는 대규모 웹 서비스인데 서버에 요청을 한다면 서버 하나에서 모든 요청을 처리하나요?
	- 로드밸런서와 API게이트웨이등을 사용하여 부하를 분산하고 각 서비스에 맞는 서버에 처리를 전달합니다.

Q. 로드밸런싱에 대해서 설명해 보세요
	-> 개요 설명
	로드밸런싱을 할 때 L7기반의 로드밸런싱은 URI를 기반으로 한다고 했는데 API 게이트웨이와 다른 점은?

Q. 로드밸런서의 기능은 뭐가 있나요?
	- Health Check, NAT, Tunneling, DSR

Q.  로드밸런서가 있는 환경에서 여러 서버가 한 클라이언트에게 서비스를 제공한다면 어떻게 해야할까요?
	sticky Session-> 첫 요청을 한 서버와만 계속하여 통신을 하는 것 - cookie나 ip트래킹
	문제점 -> 로드밸런싱이 잘 동작 하지 않을 수 있음(특정 서버만 부하가 올 수 있다.)- 해당 서버 장애시 세션이 사라진다.

	session Clustering-> 세션 서버를 분리하면 이문제를 해결 할 수 있다. (Redis와 같은 서버에 세션을 저장하여 구현할 수 있음)

	JWT를 이용하여 클라이언트가 전적으로 정보를 저장하고 있는 방식을 사용할 수 있습니다.

Q. Web서버나 로드밸런서, 프록시 서버등을 DMZ라고 부르는 공간에 배포하는 이유는?
	- WAS는 DataBase에 직접적으로 연결되어있어 WAS가 해킹당한다면 DB도 매우 위험합니다. 따라서 DMZ라는 공간에 배포하여 WAS에 접근할 때 DMZ의 서버들을 통해 간접적으로 접근하여 보안을 높일 수 있기 때문에 DMZ에 배포합니다.

Q. 서버에 트래픽이 주어졌을 때 어떻게 응답속도를 개선할 수 있는가?
	 - 어떠한 특정 서비스를 제공 할 때만 성능이 느려진다면 그 서비스에 대한 로직을 최적화하는 리펙토링을 통해 처리시간을 줄이고
	 - 혹은 데이터 베이스에서 데이터를 읽어 올때 속도가 느려진다면 파티셔닝이나 샤딩, 인덱스 수정 등을 통해 속도를 높일 수 있습니다.
	 - 만일 이런 작업을 했음에도 불구하고 계속하여 트래픽이 높다면 서버의 처리 성능이 부족하다고 판단하여 Scale-up이나 Scale-out을 통해 서버의 트래픽을 분산 혹은 처리속도를 가속화 하여 응답속도를 개선할 수 있습니다.