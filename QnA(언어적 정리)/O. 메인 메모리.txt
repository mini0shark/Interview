Q. 페이징과 세그멘테이션에 대해 설명해 보세요

페이징은 외부 단편화를 예방하기 위해 사용되는 메모리 할당 기법입니다.
물리 메모리를 프레임이라는 단위로 나누고 논리 메모리를 페이지라는 단위로 나눕니다. 이때 페이지와 프레임의 크기는 같습니다.
프로세스를 메모리에 올려야 하는 경우에 나누어진 페이지를 각 분산된 프레임에 올려서 프로세스를 진행하게 됩니다.
페이지들은 분산되어 있기 때문에 CPU가 페이지에 접근하려면 실제 저장위치를 알아야 하는데 이는 페이지 테이블형식으로 저장됩니다.
페이징의 장점으로는 외부단편화가 발생하지 않는다는 것인데 단점으로는 내부 단편화가 발생한다는 점입니다.

Q. 내부 단편화를 없애기 위한 방법도 있을까요?

내부 단편화를 없애기 위한 방법은 세그멘테이션입니다.
 프레임과 페이지를 일정한 크기로 나누는 페이징과 달리 세그멘테이션은 프로세스의 논리적 작업단위로 나누어 메모리에 적재합니다. 페이지의 경우에는 모든 페이지가 다 같은 크기이기 때문에 논리적 메모리가 어느 위치의 프레임에 있는지만을 페이지 테이블에 저장하면 되지만, 세그멘테이션의 경우에는 각 세그먼트의 크기가 모두 다르기 때문에 세그먼트 테이블에는 세그먼트의 물리적 주소 시작 부분과 세그먼트의 크기를 함께 저장해서 만약 cpu가 참조하려는 부분이 해당 물리 영역을 벗어날 경우에는 인터럽트를 발생시켜서 프로세스를 종료하게 됩니다.
세그멘테이션은 내부 단편화가 발생하지 않습니다. 하지만 외부단편화가 일어난다는 단점이 있습니다.

따라서, 이 둘을 합쳐서 우선 세그멘테이션을 통해 프로세스를 작업 단위로 나눈 후 페이징을 통해 외부 단편화를 없애는 법도 있습니다. 하지만 세그먼트테이블과 페이지 테이블을 거쳐야 하기 때문에 CPU에서 메모리에 접근하는 시간이 2배로 걸린다는 한계가 있습니다.

Q. 외부단편화랑 내부 단편화가 뭐에요?
 각기 다른 크기의 메모리에 할당을 하다고 반환받다보면 매우 작은 공간이 메모리 여기저기에 흩어져 있게 됩니다. 이 경우 그 빈 공간들을 모아 놓았을 때는 충분히 큰 공간이 나오지만 작게 나누어져 있어 프로세스에 메모리를 할당할 수 없게 되는 일이 발생합니다. 이를 외부 단폄화라고 합니다.
 이런 외부 단편화를 해결하기 위한 방법인 페이징에서 프로세스를 나누다 보면 페이지에 정확하게 맞지않고 더 작은 나머지 페이지가 프레임에 할당되게 됩니다. 이처럼 필요한 양보다 더 큰 메모리가 할당되어 공간이 남는 현상이 내부 단편화라고 합니다.


Q. 페이지 크기가 큰게 좋을까요 작은게 좋을까요?

페이지의 크기는 적절한 균형을 갖아야 합니다.
 페이지 크기가 크다면 디스크에 한번 접근했을 때 한번에 많은 양의 데이터를 불러 올 수 있어 디스크 접근 시간이 줄어들고 페이지 테이블의 크기가 작아지는 등 처리속도가 줄어든다는 장점이 있지만 내부 단편화의 크기가 커진다는 단점이 있습니다.
 페이지 크기가 작다면 내부 단편화의 크기는 작아져서 메모리 효율이 좋아지겠지만 디스크를 자주 접근해야 한다는 단점을 가지고 있습니다.
프로세스의 크기가 커지면서 페이지의 크기도 커지고 있는데 CPU의 처리속도, 디스크에서 읽는 속도 등을 고려하여 적당한 크기의 페이지를 정해야 합니다.



왜 프로세스는 논리주소를 사용하는가? o
