※ 스택을 스레드마다 독립적으로 할당하는 이유
스택은 함수 호출 시 전달되는 인자, 되돌아갈 주소값 및 함수 내에서 선언하는 변수 등을 저장하기 위해 사용되는 메모리 공간이므로 스택 메모리 공간이 독립적이라는 것은 독립적인 함수 호출이 가능하다는 것이고 이는 독립적인 실행 흐름이 추가되는 것이다. 따라서 스레드의 정의에 따라 독립적인 실행 흐름을 추가하기 위한 최소 조건으로 독립된 스택을 할당한다.
독립적인 실행 흐름의 최소조건으로 스택을 할당한다.
Q) 스택을 스레드마다 독립적으로 할당해야하는 이유는?

스택은 함수 호출시 전달되는 인자, 되돌아갈 주소값 및 함수 내에서 선언하는 변수 등을 저장하기 위해 사용되는 메모리 공간이므로 스택 메모리 공간이 독립적이라는 것은 독립적인 함수 호출이 가능하다는 것이고 이는 독립적인 실행 흐름이 추가되는 것이다. 따라서 스레드 정의에 따라 독립적인 실행 흐름을 추가하기 위한 최소 조건으로 독립된 스택을 할당한다.
https://parkcheolu.tistory.com/12


※ 잊지 말아야 할 것은 스레드에서만 이런 일이 발생하지 않는다. 멀티 프로세스 방식 IPC에 대한 크리티컬 섹션에 대한 동기화가 필요하다. 이런 동기화 기법이 세마포어와 뮤텍스 등이다. (단지 스레드에서 더욱 동기화 문제가 대두되는 것은.... 대부분의 자원을 공유하기 때문에 생길 수밖에 없는 문제이고, 프로세스에서는 그럴 일이 많지 않다고 본다.... 매번 하는 것과 한 두 번 하는 것의 차이랄까?)

 동기화 문제는 멀티 프로세스 방식 IPC의 임계구역등에서도 발생한다. 단지 여기서는 멀티 쓰레드, 프로세스를 돌릴 때 다른 쓰레드, 프로세스간에 데이터를 주고 받을 필요가 없는 경우에 프로세스, 스레드를 만들기 전에 사용하던 객체나 변수를 가지고 각 작업을 할 경우를 염두해 둔 것 같다.


시작전 a객체를 사용중이고 특정 부분에서 멀티 쓰레드, 멀티 프로세스로 작업이 바뀌었을 때 a에 접근할 경우 a가 스택에 있지 않다면 쓰레드의 경우에는 문제가 생길 수 있다.(프로세스는 새로 만들어 짐)




Thread를 실행하기전에 생성한 객체(힙에 저장)에 대해서 각 Thread에 인자로 넘겨주고 이에 대해서 각 쓰레드가 접근할 수 있다.


멀티 프로세스 방식이 동기화 필요 없는 이유
=> 프로세스 방식에서 동기화가 필요한 것은 스레드에서는 필요하지 않기 때문에.
 내가 어제 얘기한대로 쓰레드의 경우에 0으로 나누기 전 확인하고 나눈다고 하더라도 그 사이에 다른 스레드가 그 값을 0으로 바꿀 수 있는데, 프로세스는 그게 아니잖음
=> 멀티프로세스 자체에서는 IPC를 생각안하면 동기화 걱정이 없다.


##언어별로 메모리 영역...->
파이썬, C/ C++ => 데이터( 전역변수 (static), 상수), 스택 ( 함수), 힙 ( 객체, 동적할당)
자바 => 메서드영역( 클래스정보, 전역변수 (static)), 힙( 인스턴스 저장 ), 호출스택(실행되는 메서드에 대한 지역변수, 리턴값등이 저장됨)



스레드 풀
Thread Safe

