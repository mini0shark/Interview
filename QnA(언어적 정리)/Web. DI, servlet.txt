Webserver에서 스프링까지 발전과정
CGI의 문제점
1. request마다 process를 만듦 -> 시간 오래걸림
2. 같은 구현체를 사용해도 Thread가 다르면 구현체가 각각 생김

-> 여러Instance에서 Singleton으로 바뀜(Servlet)- WAS
WebContainer가 Thread를 하나씩 만듬
HTTPServlet이 Servlet을 상속받아서 구현
doGet doPost...

Servlet이 없으면 Instance생성(Init)
Container를 종료할 때 서블릿 인스턴스 종료(distroy)
 메모리를 공유, Thread마다 Local variable 독립적으로 생성

Servlet의 문제점
- url마다 서블릿이 필요(web.xml)-여러 서블릿 필요

Spring
모든 url이 DispatcherServlet으로 먼저감
-> Handler

Servlet-> 서블릿에서 뷰로 보내는 것 까지 만들었음
Spring(Dispatcher) -> 뷰 분리 가능



- filter, interceptor, aop
filter, interceptor -> servlet단위에서 실행
- filter : 일반적으로 인코딩 변환 처리, XSS방어 -> 스프링과 무관한 자원에 대해 동작
- interceptor : 스프링 컨텍스트 내부에서 Controller에 관한 요청과 응답에 대해 처리한다.
	
aop -> 메소드 앞에 Proxy패턴의 형태로 실행
filter-> intercepter -> aop -> intercepter -> filter

DI 방식 3가지에 대해 말하고 비교해보라
- setter Injection, Feild Injection
 1. 생성자를 통해 주입받지 않아도 객체를 생성 할 수 있고 이에 따라 NullPointException이 발생할 수 있다.
 2. Feild Injection은 setter Injection과 달리 스프링 컨테이너 말고는 외부에서 주입 할 수 있는 방법이 없다.
- Constructor Injection
 1. null을 주입하지 않는 한 NullPointerException이 발생하지 않는다.
 2. 의존관계 주입을 하지 않은 경우 Controller 객체를 생성할 수 없다. -> 컴파일 타임에 오류를 잡아낼 수 있다.(의존관계에 대한 내용을 외부로 노출 시킴으로써.)
 3. final을 사용할 수 있다. final은 선언과 함께 초기화 되어야 하므로 setter주입시에는 final을 선언할 수 없다.
 (final의 장점은 객체 내부에서 final 변수를 바꿀 수 없다는 점이다.)
 4. 순환참조 방지
 5. 단위테스트 작성하기 좋아짐
	-> 객체가 가진 메소드들에 대해 단위 테스트를 수행하고 싶은 경우, field injection을 사용해서 작성된 클래스일 경우 단위테스트 시 의존 관계를 가지는 객체를 주입할 수 없다.

IOC와 DI를 느낀적 있나(IOC에 대한 설명과 예)
-> 예를 생각해 보고 가는게 좋을 거같군...
 디자인 패턴을 공부하면서 클래스 안에서 객체를 생성하는게 아니라 외부에서 객체를 주입하는 예제를 연습할 때, 객체를 생성하는 것에대한 제어를 해당 클래스가 아니라 외부에서 주입해준다는 것으로 부터 IOC를 느낀적이 있는데요. 그런 예제를 공부하면서 스프링에서도 이런 식으로 제가 직접 의존성을 설정해주는게 아니라 스프링컨테이너에 있는 Bean을 주입해준다는 것을 느낄 수 있었습니다.



SOLID